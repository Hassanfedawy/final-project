// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  monitors      Monitor[]
  subscription  Subscription?
  notifications Notification[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Monitor {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  url           String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  alertThreshold Int     @default(3)
  interval      Int      @default(300)
  checks        Check[]
  status        String   @default("pending")
}

model Check {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  monitorId   String   @db.ObjectId
  monitor     Monitor  @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  status      Int
  timestamp   DateTime @default(now())
  responseTime Int?
}

model Subscription {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @unique @db.ObjectId
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  paypalSubscriptionId String?  @unique
  planId              String
  status              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
